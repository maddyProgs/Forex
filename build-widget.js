const fs = require('fs');
const path = require('path');

// Build script to create widget bundle
function buildWidget() {
  console.log('Building trading widget...');
  
  // Create widget directory if it doesn't exist
  const widgetDir = path.join(__dirname, 'dist', 'widget');
  if (!fs.existsSync(widgetDir)) {
    fs.mkdirSync(widgetDir, { recursive: true });
  }
  
  // Create widget loader script
  const widgetLoader = `
(function() {
  'use strict';
  
  // Widget configuration
  const WIDGET_CONFIG = {
    apiUrl: 'https://fastapi-1-zl38.onrender.com',
    version: '1.0.0'
  };
  
  // Load Angular widget bundle
  function loadWidget() {
    const script = document.createElement('script');
    script.src = 'https://your-domain.com/dist/widget/main.js';
    script.async = true;
    script.onload = function() {
      console.log('Trading widget loaded successfully');
    };
    script.onerror = function() {
      console.error('Failed to load trading widget');
    };
    document.head.appendChild(script);
  }
  
  // Auto-load when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadWidget);
  } else {
    loadWidget();
  }
})();
`;
  
  // Write widget loader
  fs.writeFileSync(path.join(widgetDir, 'trading-widget.js'), widgetLoader);
  
  // Create README for widget deployment
  const readme = `
# Trading Widget Deployment

## Files to host:
1. trading-widget.js - Widget loader script
2. main.js - Angular widget bundle (generated by ng build)
3. Any additional assets from the build

## Client Integration:
\`\`\`html
<script src="https://your-domain.com/widget/trading-widget.js"></script>
<trading-widget client-id="your-client-id"></trading-widget>
\`\`\`

## Build Commands:
1. npm run build-widget
2. Deploy dist/widget/ contents to your CDN/server
`;
  
  fs.writeFileSync(path.join(widgetDir, 'README.md'), readme);
  
  console.log('Widget build completed!');
}

buildWidget();